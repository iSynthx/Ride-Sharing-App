package rsa.service;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;

import rsa.shared.RideSharingAppException;

public class Users extends Object implements Serializable {
		
	private static final long serialVersionUID = 1L;
	//private static Users instance = null; //Um singleton tem sempre uma unica instancia da propria classe!
	private static Users instance ;
	private static Map<String, User> users = new HashMap<String,User>();
	private static String filePath = "serialized.txt";
	private static File myFile = null;
	private static boolean fileCreated = false;
	
	/*Na API chama-se getPlayersFile*/
	public static File getFile() {
		File file = null;
		
		if (myFile != null)
			return myFile;
		
		try {
			file = new File(filePath);
			if (file.createNewFile()) {
				System.out.println("The file didn't exist! An empty file was created and returned null!");
				fileCreated = true;
				return null;
			}			
			else
				System.out.println("File sucessfuly opened!");
		}
		catch (IOException e) {
			System.out.println("An error has occurred while opening the file!");
			System.exit(1);
		}
		myFile = file;
		return file;
	}
	
	public static void setFile(File managerFile) {
		filePath = managerFile.toPath().toString();
	}
	
	public static Users getInstance() throws RideSharingAppException {
		
		return instance;
		
		/*File deserialFile = getFile();	
		
		if (deserialFile == null) {
			instance = new Users();
			return instance;
		}
	
		try {
			//Gerar stream de input do ficheiro e input de stream de objeto
			FileInputStream inputFile = new FileInputStream(deserialFile);
			ObjectInputStream objectInput = new ObjectInputStream(inputFile);
			
			//Ler do stream de input e deserializar para o objeto
			instance = (Users) objectInput.readObject();
			
			//Fechar as streams
			inputFile.close();
			objectInput.close();
		}
		catch (IOException | ClassNotFoundException e) {
			throw new RideSharingAppException("An error has occurred while deserializing!");
		}		
		System.out.println("The object has been deserialized!");
		return instance;*/
	}
	
	void reset() {
		users.clear();
		try {
			if (fileCreated == true)
				Files.delete(myFile.toPath());
		} catch (IOException e) {
			System.out.println("Error while deleting file!");
		}
		instance = null;
		users = new HashMap<>();
	}
	
	boolean register(String nick, String name, String password) throws RideSharingAppException {
		if (users.containsKey(nick) || nick.contains(" "))
			return false;
		
		File serialFile = getFile();
		User newUser = new User(nick,name,password);
		users.put(nick, newUser);
		if (serialFile == null)
			return false;
		try {
			//Gerar stream de output do ficheiro e output de stream de objeto
			FileOutputStream outputFile = new FileOutputStream(serialFile);
			ObjectOutputStream objectOutput = new ObjectOutputStream(outputFile);
			
			//Ler do objeto e serializar para o ficheiro
			objectOutput.writeObject(newUser);			
			
			//Fechar as streams
			outputFile.close();
			objectOutput.close();
		}
		catch (IOException e) {
			throw new RideSharingAppException("An error has occurred while serializing!");
		}
		System.out.println("The object has been serialized!");
		return true;
	}
	
	boolean updatePassword(String nick, String oldPassword, String newPassword) throws RideSharingAppException {
		if (!users.containsKey(nick))
			return false;
		
		User currentUser = users.get(nick);
		
		if (!currentUser.getPassword().equals(oldPassword))
			return false; 
		
		//Muda-se a password no objeto
		currentUser.setPassword(newPassword);
		
		File serialFile = getFile();
		if (serialFile == null)
			return false;
		try {
			//Gerar stream de output do ficheiro e output de stream de objeto
			FileOutputStream outputFile = new FileOutputStream(serialFile);
			ObjectOutputStream objectOutput = new ObjectOutputStream(outputFile);
			
			//Ler do objeto e serializar para o ficheiro
			objectOutput.writeObject(currentUser);			
			
			//Fechar as streams
			outputFile.close();
			objectOutput.close();
		}
		catch (IOException e) {
			throw new RideSharingAppException("An error has occurred while serializing!");
		}
		System.out.println("The object has been serialized!");
		return true;
	}
	
	boolean authenticate(String nick, String password) {
		if (users.containsKey(nick))
			if (users.get(nick).getPassword().equals(password))
				return true;
		return false;
	}
	
	public User getUser(String nick) {
		return users.get(nick);
	}
}